const { exec, spawn } = require("child_process");
const axios = require("axios");

// C·∫•u h√¨nh
const BOT_TOKEN = "7828296793:AAEw4A7NI8tVrdrcR0TQZXyOpNSPbJmbGUU"; // Thay b·∫±ng token bot Telegram c·ªßa b·∫°n
const CHAT_ID = "7371969470"; // Thay b·∫±ng chat ID c·ªßa b·∫°n
const NGROK_AUTH_TOKEN = "2tYhiPUn9AjgGNWUJFRFBGqZqRm_3y9JovAeKK6q8Q9BdsvYr"; // Thay b·∫±ng token Ngrok c·ªßa b·∫°n
const CODE_SERVER_PORT = "9999"; // Port cho code-server

// H√†m g·ª≠i tin nh·∫Øn qua Telegram
const sendTelegramMessage = async (message) => {
  try {
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: CHAT_ID,
      text: message,
    });
    console.log("‚úÖ Tin nh·∫Øn ƒë√£ g·ª≠i!");
  } catch (error) {
    console.error("‚ùå L·ªói g·ª≠i Telegram:", error.message);
  }
};

// H√†m ki·ªÉm tra code-server ƒë√£ s·∫µn s√†ng ch∆∞a
const waitForCodeServer = async () => {
  await sendTelegramMessage("üîÑ ƒêang ki·ªÉm tra code-server...");
  return new Promise((resolve, reject) => {
    const check = setInterval(() => {
      exec(`curl -s http://localhost:${CODE_SERVER_PORT}`, (error) => {
        if (!error) {
          clearInterval(check);
          resolve();
        }
      });
    }, 1000); // Ki·ªÉm tra m·ªói 1 gi√¢y
    setTimeout(() => {
      clearInterval(check);
      reject(new Error("‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c code-server sau 30s"));
    }, 30000); // Timeout sau 30 gi√¢y
  });
};

// H√†m l·∫•y URL Ngrok
const getNgrokUrl = async () => {
  try {
    const response = await axios.get("http://127.0.0.1:4040/api/tunnels");
    const publicUrl = response.data.tunnels[0]?.public_url;
    if (!publicUrl) throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y tunnel");
    return publicUrl;
  } catch (error) {
    throw new Error(`‚ùå L·ªói l·∫•y URL Ngrok: ${error.message}`);
  }
};

// H√†m kh·ªüi ƒë·ªông Ngrok
const startNgrok = async (port) => {
  await sendTelegramMessage("üîÑ Th√™m authtoken Ngrok...");
  exec(`ngrok config add-authtoken ${NGROK_AUTH_TOKEN}`, async (error, stdout, stderr) => {
    if (error) {
      console.error(`‚ùå L·ªói th√™m authtoken: ${stderr}`);
      await sendTelegramMessage(`‚ùå L·ªói th√™m authtoken: ${stderr}`);
      return;
    }
    console.log(`‚úÖ Authtoken th√†nh c√¥ng: ${stdout}`);
    await sendTelegramMessage("‚úÖ Authtoken th√†nh c√¥ng!");

    const ngrok = spawn("ngrok", ["http", port]);
    ngrok.stderr.on("data", (data) => {
      console.error(`[ngrok] ${data}`);
    });

    // ƒê·ª£i 5 gi√¢y ƒë·ªÉ Ngrok kh·ªüi ƒë·ªông ho√†n to√†n
    setTimeout(async () => {
      try {
        const url = await getNgrokUrl();
        await sendTelegramMessage(
          `üåê Public URL: ${url}/?folder=/NeganServer\nüëâ Truy c·∫≠p URL v√† b·∫•m [Visit] ƒë·ªÉ truy c·∫≠p Server.`
        );
      } catch (error) {
        await sendTelegramMessage(`‚ùå L·ªói l·∫•y URL Ngrok: ${error.message}`);
      }
    }, 5000);

    ngrok.on("close", (code) => {
      sendTelegramMessage(`üî¥ Ngrok ƒë√≥ng v·ªõi m√£ ${code}`);
    });
  });
};

// H√†m kh·ªüi ƒë·ªông code-server
const startCodeServer = async () => {
  await sendTelegramMessage("üîÑ Kh·ªüi ƒë·ªông code-server...");
  const codeServer = spawn("code-server", ["--bind-addr", `0.0.0.0:${CODE_SERVER_PORT}`, "--auth", "none"]);

  codeServer.stderr.on("data", (data) => {
    console.error(`[code-server] ${data}`);
  });

  codeServer.stdout.on("data", (data) => {
    console.log(`[code-server] ${data}`);
  });

  await waitForCodeServer();
  await sendTelegramMessage("‚úÖ Code-server s·∫µn s√†ng!");
};

// H√†m ch√≠nh
(async () => {
  try {
    await startCodeServer();
    await startNgrok(CODE_SERVER_PORT);
  } catch (error) {
    await sendTelegramMessage(`‚ùå L·ªói: ${error.message}`);
  }
})();
